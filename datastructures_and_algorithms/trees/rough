    private BinaryNode deleteNode(BinaryNode parent, int data) {
        BinaryNode node = (parent.left != null && parent.left.data == data) ? parent.left : parent.right;
        switch (getTypeOfNode(node)) {
            case AVLTree.LEAF_NODE -> {
                System.out.println("deleting leaf-node");
                if (parent.data >= data) parent.left = null;
                else parent.right = null;
            }
            case AVLTree.LEFT_NODE -> {
                System.out.println("deleting left-sub-tree-node");
                if (parent.left.left != null) parent.left = parent.left.left;
                else parent.left = parent.left.right;
            }
            case AVLTree.RIGHT_NODE -> {
                System.out.println("deleting right-sub-tree-node");
                if (parent.right.left != null) parent.right = parent.right.left;
                else parent.right = parent.right.right;
            }
            case AVLTree.ROOT_NODE -> {
                System.out.println("deleting root-node");
                node.data = deleteRootNode(node);

            }
            default -> System.out.println("Invalid node type...");
        }
        return node;
    }

    private int deleteRootNode(BinaryNode node) {
        BinaryNode parent = node.right;
        BinaryNode bn = node.right;
        int retData = bn.data;
        while (bn.left != null) {
            parent = bn;
            bn = bn.left;
        }
        if (parent == bn) {
            deleteNode(node, node.right.data);
        } else {
            retData = parent.left.data;
            deleteNode(parent, parent.left.data);
        }
        return retData;
    }
protected void delete(int data) {
        if (root == null) {
            System.out.println("BST is Empty");
        } else if (root.data == data) {
            if (root.left != null && root.left.data == data) deleteNode(root, root.left.data);
            else if (root.left == null && root.right == null) {
                root = null;
            } else root.data = deleteRootNode(root);
        } else {
            BinaryNode node = root, parent = root;
            while (true) {
                if (node.data == data) {
                    System.out.println("Parent:" + parent.data + " Data:" + node.data);
                    BinaryNode dNode = deleteNode(parent, data);
                    System.out.println("Deleted data : " + dNode.data);
                    break;
                } else if (data < node.data) {
                    if (node.left != null) {
                        parent = node;
                        node = node.left;
                    } else {
                        printErrorMessage("Node not found");
                        break;
                    }
                } else {
                    if (node.right != null) {
                        parent = node;
                        node = node.right;
                    } else {
                        printErrorMessage("Node not found");
                        break;
                    }
                }
            }
        }
    }


        private int getTypeOfNode(BinaryNode node) {
            if (node.left != null && node.right != null) return ROOT_NODE;
            else if (node.left == null && node.right == null) return LEAF_NODE;
            else if (node.left != null) return LEFT_NODE;
            else return RIGHT_NODE;
        }